/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.storagesync.v2018_04_02.implementation;

import com.microsoft.azure.management.storagesync.v2018_04_02.SyncGroup;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;

class SyncGroupImpl extends CreatableUpdatableImpl<SyncGroup, SyncGroupInner, SyncGroupImpl> implements SyncGroup, SyncGroup.Definition, SyncGroup.Update {
    private final StorageSyncManager manager;
    private String resourceGroupName;
    private String storageSyncServiceName;
    private String syncGroupName;
    private String cuniqueId;
    private String uuniqueId;

    SyncGroupImpl(String name, StorageSyncManager manager) {
        super(name, new SyncGroupInner());
        this.manager = manager;
        // Set resource name
        this.syncGroupName = name;
        //
    }

    SyncGroupImpl(SyncGroupInner inner, StorageSyncManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.syncGroupName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.storageSyncServiceName = IdParsingUtils.getValueFromIdByName(inner.id(), "storageSyncServices");
        this.syncGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "syncGroups");
        //
    }

    @Override
    public StorageSyncManager manager() {
        return this.manager;
    }

    @Override
    public Observable<SyncGroup> createResourceAsync() {
        SyncGroupsInner client = this.manager().inner().syncGroups();
        return client.createAsync(this.resourceGroupName, this.storageSyncServiceName, this.syncGroupName, this.cuniqueId)
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<SyncGroup> updateResourceAsync() {
        SyncGroupsInner client = this.manager().inner().syncGroups();
        return client.createAsync(this.resourceGroupName, this.storageSyncServiceName, this.syncGroupName, this.uuniqueId)
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<SyncGroupInner> getInnerAsync() {
        SyncGroupsInner client = this.manager().inner().syncGroups();
        return client.getAsync(this.resourceGroupName, this.storageSyncServiceName, this.syncGroupName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String syncGroupStatus() {
        return this.inner().syncGroupStatus();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public String uniqueId() {
        return this.inner().uniqueId();
    }

    @Override
    public SyncGroupImpl withExistingStorageSyncService(String resourceGroupName, String storageSyncServiceName) {
        this.resourceGroupName = resourceGroupName;
        this.storageSyncServiceName = storageSyncServiceName;
        return this;
    }

    @Override
    public SyncGroupImpl withUniqueId(String uniqueId) {
        if (isInCreateMode()) {
            this.cuniqueId = uniqueId;
        } else {
            this.uuniqueId = uniqueId;
        }
        return this;
    }

}
